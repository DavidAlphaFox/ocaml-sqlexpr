description = "SQLite database access."
requires = "bigarray
            bytes
            csv
            lwt
            lwt.log
            lwt.unix
            result
            sqlite3
            threads
            threads.posix
            unix"
archive(byte) = "sqlexpr.cma"
archive(native) = "sqlexpr.cmxa"
plugin(byte) = "sqlexpr.cma"
plugin(native) = "sqlexpr.cmxs"

package "ppx" (
  directory = "ppx"
  version = "dev"
  description = "Sqlexpr PPX syntax extension"
  requires(ppx_driver) = "sqlexpr.omp"
  requires(-ppx_driver) = "bytes sqlexpr re result"
  ppx(-ppx_driver,-custom_ppx) = "./ppx.exe --as-ppx"
)

package "omp" (
  version = "dev"
  description = "Sqlexpr ocaml-migrate-parsetree PPX (internal)"
  requires(ppx_driver) = "compiler-libs
                          compiler-libs.common
                          ocaml-migrate-parsetree
                          ppx_tools_versioned"
 ppx_runtime_deps = "bytes sqlexpr re result"
 exists_if = "ppx_sqlexpr.cma"
 archive(byte) = "ppx_sqlexpr.cma"
 archive(native) = "ppx_sqlexpr.cmxa"
 plugin(byte) = "ppx_lwt.cma"
 plugin(native) = "ppx_lwt.cmxs"
)

package "syntax" (
  directory = "syntax"
  version = "dev"
  description = "Sqlexpr syntax extension"
  requires = "camlp4 estring"
  archive(syntax,preprocessor) = "pa_sql.cma"
  archive(syntax, toploop) = "pa_sql.cma"
  archive(syntax, preprocessor, native) = "pa_sql.cmxa"
  archive(syntax, preprocessor, native, plugin) = "pa_sql.cmxs"
  exists_if = "pa_sql.cma"
)
